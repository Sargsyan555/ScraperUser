"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextHandler = void 0;
const common_1 = require("@nestjs/common");
const manu_1 = require("../utils/manu");
const users_service_1 = require("../authorization/users.service");
const stock_service_1 = require("../../stock/stock.service");
const validator_1 = require("../utils/validator");
const comparator_textMsg_1 = require("../textMsg/comparator.textMsg");
let TextHandler = class TextHandler {
    usersService;
    stockService;
    constructor(usersService, stockService) {
        this.usersService = usersService;
        this.stockService = stockService;
    }
    async handle(ctx) {
        if (ctx.session.step === "single_part_request") {
            const start = performance.now();
            const message = ctx.message;
            const textMessage = message?.text?.trim();
            if (!textMessage) {
                await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                return;
            }
            const parts = textMessage.split(",").map((part) => part.trim());
            let artikul = "";
            let qtyStr = "1";
            let brand = "";
            if (parts.length === 3) {
                [artikul, qtyStr, brand] = parts;
            }
            else if (parts.length === 2) {
                let second;
                [artikul, second] = parts;
                if (!isNaN(Number(second))) {
                    qtyStr = second;
                }
                else {
                    brand = second;
                }
            }
            else if (parts.length === 1) {
                artikul = parts[0];
            }
            else {
                await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1979322, 1, CAT");
                return;
            }
            const qty = Number(qtyStr);
            if (!artikul || isNaN(qty) || qty < 1) {
                await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: 1979322, 1, CAT");
                return;
            }
            await ctx.reply("üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
            const nameItem = (0, validator_1.normalizeInput)(artikul);
            const checkItem = { name: nameItem, qty, brand };
            try {
                const skladItems = this.stockService.getStock();
                const { messages } = await (0, comparator_textMsg_1.compareItemTextHandler)(checkItem, skladItems);
                await ctx.reply(messages);
                const durationSec = ((performance.now() - start) / 1000).toFixed(2);
                await ctx.reply(`‚è± –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ ${durationSec} —Å–µ–∫—É–Ω–¥.`);
            }
            catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏—è:", error);
                await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
            }
            ctx.session.step = undefined;
            await ctx.reply("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n" +
                "üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n" +
                "‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n" +
                "‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n" +
                "‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n" +
                "‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n" +
                "üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n" +
                "‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.");
        }
        else if (ctx.session.step == "add_user") {
            const message = ctx.message;
            const textMessage = message?.text?.trim();
            if (!textMessage) {
                await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                return;
            }
            await this.usersService.addUser({
                telegramUsername: textMessage,
            });
            await ctx.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
            ctx.session.step = undefined;
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", {
                parse_mode: "MarkdownV2",
                ...(await (0, manu_1.getMainMenuKeyboard)(ctx.from?.username || "", this.usersService)),
            });
            await ctx.reply("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n" +
                "üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n" +
                "‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n" +
                "‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n" +
                "‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n" +
                "‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n" +
                "üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n" +
                "‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.");
        }
        else if (ctx.session.step === "delete_user") {
            const message = ctx.message;
            const textMessage = message?.text?.trim();
            if (!textMessage) {
                await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                return;
            }
            const resultOfDelate = await this.usersService.deleteUser({
                telegramUsername: textMessage,
            });
            await ctx.reply(resultOfDelate);
            ctx.session.step = undefined;
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", {
                parse_mode: "MarkdownV2",
                ...(await (0, manu_1.getMainMenuKeyboard)(ctx.from?.username || "", this.usersService)),
            });
            await ctx.reply("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n" +
                "üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n" +
                "‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n" +
                "‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n" +
                "‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n" +
                "‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n" +
                "üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n" +
                "‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.");
        }
    }
};
exports.TextHandler = TextHandler;
exports.TextHandler = TextHandler = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [users_service_1.UsersService,
        stock_service_1.StockService])
], TextHandler);
//# sourceMappingURL=text.handler.js.map